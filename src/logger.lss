''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' cicada/logger -- logging facility for LotusScript                            '
' =================================================                            '
'                                                                              '
' Version: 0.1.0                                                               '
' Author:  Quildreen Motta <http://killdream.github.com/>                      '
' URL:     http://github.com/killdream/cicada                                  '
'                                                                              '
'                                                                              '
' This library is licensed under the permissive MIT licence:                   '
'                                                                              '
' > Copyright (c) 2011 Quildreen Motta <http://killdream.github.com/>          '
' >                                                                            '
' > Permission is hereby granted, free of charge, to any person obtaining      '
' > a copy of this software and associated documentation files (the            '
' > "Software"), to deal in the Software without restriction, including        '
' > without limitation the rights to use, copy, modify, merge, publish,        '
' > distribute, sublicense, and/or sell copies of the Software, and to         '
' > permit persons to whom the Software is furnished to do so, subject to      '
' > the following conditions:                                                  '
' >                                                                            '
' > The above copyright notice and this permission notice shall be             '
' > included in all copies or substantial portions of the Software.            '
' >                                                                            '
' > THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,            '
' > EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF         '
' > MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                      '
' > NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE     '
' > LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION     '
' > OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION      '
' > WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.            '
'                                                                              '
'------------------------------------------------------------------------------'


'===============================================================================
'## Constants
'===============================================================================
const NEWLINE = EOL_CRLF


'===============================================================================
'## Class Logger
'===============================================================================
'
' The logger provides a base functionality for logging. This means that,
' while it does most stuff you'd expect in a logger class — and I've
' tried to make it sweet to use, — it's API is designed to be extended
' and abstracted by something else.
'
' That said, the `Logger` is based around NotesDocuments. Each event is
' a new document that takes stores the following information:
'
' -   `kind` — The kind of event that's being logged.
'
'     The loggger implements three basic kind of events: `info` for
'     general information; `warn` for warnings; and `error` for errors.
'
' -   `title` — The header of the event message.
'
' -   `body` — The full message, as a RichText field.
'
' These documents are stored freely in the database with no connection
' to anything else.
'
' The logger accepts a [Streamer][] object, to whom it'll post messages
' about new events being created. The streamer can them consolidate
' these in a single stream document.
'
' 
' ### Using the logger #########################################################
'
' The logger depends on a previously set-up database and form. When
' constructing a new logger, you need to pass to the constructor which
' Database you want to use to store the events, and which form you want
' to use to display the events.
'
' **Example:**
'
'     %REM
'       Saves all events in the local `log/events.nsf`, using the
'       `(Events/Log)` form.
'     %END REM
'
'     dim event_logger as new Logger("", "log/events.nsf", "(Events/Log)")
'     call event_logger.info("New Event", "Yup, this is a new event")
' 
' You'll notice that the logging functions require `call`. Yes, I said
' functions. This way, the caller can further add information to the log
' document — sacrificing a little sugar for extensibility is a must in
' this case.
'
' **Note:**
' > Since `Error` is a reserved keyword in LotusScript (and the language
' > is case insensitive in regards of identifiers), the function to log
' > errors is actually called `erro`.
'
' 
' ### Message styling ##########################################################
'
' If you decide to use the built-in styles. Each of them export a
' different NotesRichTextStyle object that you can use to modify how the
' event message's look.
'
' These are only set-up at the Logger object instantiation, so it's safe
' to play around with them after that.
'
' For example, if you wanted the error messages to be displayed in bold
' font:
'
'     dim event_logger as new Logger("", "log/events.nsf", "(Events/Log)")
'
'     event_logger.error_style.bold = true
'     call event_logger.erro("Buu", "SHIT HAPPENED, MAN")
'
'
' ### Extending the logger #####################################################
'
' Since the main purpose of the logger is to be easily extended by the
' user, the class provides several generic functions to split the
' work. The important functions to keep in mind when extending to add
' new logging kinds are `insert` and `logData`.
'
' `logData` creates a new logging entry in the database, sets the
' document up with the given information, then returns the document for
' further modifications. `makeEntry` is an even lower-level function
' that only creates the base of the form fields.
'
' `insert` takes an log entry and saves it in the database, it also
' notifies the streamer that a new event was added to the database.
'
'
' ### See also #################################################################
'
' -   [Streamer][] — Base class for doing event consolidation. Puts
'     everything inside a single document. Can be extended to support
'     writing to other medias, like files and so.
'
'-------------------------------------------------------------------------------
public class Logger

    '===========================================================================
    '### Properties
    '===========================================================================
    ' The name of the Form that'll be used to display the event
    ' documents.
    public template as String


    ' Styles used for formatting the body of each event, according to
    ' the kind of event that was logged.
    public info_style  as NotesRichTextStyle
    public warn_style  as NotesRichTextStyle
    public error_style as NotesRichTextStyle


    '===========================================================================
    '### Internal properties
    '===========================================================================
    ' The database used for logging
    db as NotesDatabase


    '===========================================================================
    '### Setup helpers
    '===========================================================================
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Sub new
    '
    ' Creates a new instance of the logger, and does all the initial
    ' setup so it's ready to work.
    '
    ' Parameters:
    '
    ' **server**:
    '   The name of the server. An empty string means the current
    '   server. 
    '
    ' **database**:
    '   The path to the database in the server.
    '
    ' **template**:
    '   The name of the form that shall be used to display all the
    '   events logged by this object.
    '---------------------------------------------------------------------------
    sub new              _
    ( server   as String _
    , database as String _
    , template as String )
        set db = new NotesDatabase(server, database)
        call setupStyles()

        me.template = template
    end sub

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Sub setupStyles
    '
    ' Setups the formatting styles for the logging functions that need
    ' them.
    '---------------------------------------------------------------------------
    private sub setupStyles()
        set info_style  = makeInfoStyle()
        set warn_style  = makeWarnStyle()
        set error_style = makeErrorStyle()
    end sub

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function makeInfoStyle
    '
    ' Setups the formatting style for logging general information.
    '---------------------------------------------------------------------------
    function makeInfoStyle() _
    as NotesRichTextStyle
        dim session as new NotesSession

        set makeInfoStyle        = session.createRichTextStyle()
        makeInfoStyle.notesColor = COLOR_GRAY
    end function

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function makeWarnStyle
    '
    ' Setups the formatting style for logging warnings.
    '---------------------------------------------------------------------------
    function makeWarnStyle() _
    as NotesRichTextStyle
        dim session as new NotesSession

        set makeWarnStyle        = session.createRichTextStyle()
        makeWarnStyle.notesColor = COLOR_DARK_YELLOW
    end function

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function makeErrorStyle
    '
    ' Setups the formatting style for logging errors.
    '---------------------------------------------------------------------------
    function makeErrorStyle() _
    as NotesRichTextStyle
        dim session as new NotesSession

        set makeErrorStyle        = session.createRichTextStyle()
        makeErrorStyle.notesColor = COLOR_DARK_RED
    end function


    '===========================================================================
    '### Logging helpers
    '===========================================================================
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function makeEntry
    '
    ' Initialises an event log document.
    '
    ' Parameters:
    '
    ' **kind**:
    '   The type of event that was generated. Examples are `info`,
    '   `warning` and `error`.
    '
    ' **title**:
    '   The heading of the event. Streamers might use only this
    '   information to display in the stream.
    '---------------------------------------------------------------------------
    function makeEntry  _
    ( kind  as String   _
    , title as String ) _
    as NotesDocument
        set makeEntry  = new NotesDocument(db)
        makeEntry.form = template

        makeEntry.title = title
        makeEntry.kind  = kind
        call makeEntry.createRichTextItem("body")
    end function

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function logData
    '
    ' Creates a full event log document.
    '
    ' **See also:**
    '
    ' -   [Logger.makeEntry][] — lower level function to make event
    '     documents.
    '---------------------------------------------------------------------------
    function logData                  _
    ( kind    as String               _
    , title   as String               _
    , message as String               _
    , style   as NotesRichTextStyle ) _
    as NotesDocument
        dim body as NotesRichTextItem

        set logData = makeEntry(kind, title)
        set body    = logData.getFirstItem("body")

        with body
            if style is not nothing then
                call .appendstyle(style)
            end if
            call .appendText(body)
        end with
    end function

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function insert
    '
    ' Saves an event log entry in the database, and notifies the
    ' streamer (if any) that new events were generated.
    '---------------------------------------------------------------------------
    function insert            _
    ( entry as NotesDocument ) _
    as NotesDocument
        ' TODO: notify streamers
        call entry.save(false, false)
        set insert = entry
    end function


    '===========================================================================
    '### High-level logging functions
    '===========================================================================
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function info
    '
    ' Logs a general event.
    '---------------------------------------------------------------------------
    function info         _
    ( title   as String   _
    , message as String ) _
    as NotesDocument
        set info = logData("info", title, info_style, message)
        call insert(info)
    end function

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function warn
    '
    ' Logs a warning.
    '---------------------------------------------------------------------------
    function warn         _
    ( title   as String   _
    , message as String ) _
    as NotesDocument
        set warn = logData("warning", title, warn_style, message)
        call insert(warn)
    end function

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function erro
    '
    ' Logs an error.
    '---------------------------------------------------------------------------
    function erro         _
    ( title   as String   _
    , message as String ) _
    as NotesDocument
        set erro = logData("error", title, error_style, message)
        call insert(erro)
    end function


    '===========================================================================
    '### General utilities
    '===========================================================================
    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function getDate
    '
    ' Returns a String with the current date formatted to General Date.
    '---------------------------------------------------------------------------
    function getDate _
    ( givenDate )    _
    as String
        getDate = "[" + Format(givenDate, "General Date") + "]"
    end function

    ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    ' #### Function fatal
    '
    ' Displays a fatal error. Used ultimately when we have errors while
    ' logging other errors.
    '---------------------------------------------------------------------------
    sub fatal _
    ( message as String )
        print getDate(Today) + " — FATAL ERROR: " + NEWLINE + message
    end sub
    
end class


